name: CI/CD Pipeline

# Trigger the workflow on push to main and all pull requests
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  # Allow manual triggering
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - production

# Global environment variables
env:
  PYTHON_VERSION: '3.11'
  TERRAFORM_VERSION: '1.5.7'
  AWS_REGION: 'eu-west-1'
  ECR_REPOSITORY: 'cleanpro'
  TF_STATE_BUCKET: 'cleanpro-terraform-state'
  TF_LOCK_TABLE: 'cleanpro-terraform-locks'

# Define a job for each stage of the pipeline
jobs:
  # =========================================================================
  # Testing and Code Quality
  # =========================================================================
  test:
    name: Test and Lint
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Run linting
        run: |
          pip install flake8 black
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          black --check .
        continue-on-error: true
          
      - name: Run unit tests
        run: |
          pip install pytest pytest-cov
          pytest --cov=./ --cov-report=xml
          
      - name: Upload test coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage.xml
          
  # =========================================================================
  # Security Scanning
  # =========================================================================
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety
          
      - name: Scan with Bandit
        run: |
          bandit -r . -x ./tests -f json -o bandit-results.json
        continue-on-error: true
          
      - name: Check dependencies with Safety
        run: |
          safety check -r requirements.txt --json > safety-results.json
        continue-on-error: true
          
      - name: Upload security scan results
        uses: actions/upload-artifact@v3
        with:
          name: security-scan-results
          path: |
            bandit-results.json
            safety-results.json
            
      # Optional: Fail the build if critical vulnerabilities are found
      - name: Check for critical vulnerabilities
        run: |
          if grep -q '"severity": "high"' bandit-results.json; then
            echo "Critical security issues found in code scanning"
            exit 1
          fi
          
  # =========================================================================
  # Build Container Image
  # =========================================================================
  build:
    name: Build and Push Container
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Build, tag, and push image
        id: build-image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Export image digest
        run: echo "IMAGE_DIGEST=${{ steps.build-image.outputs.digest }}" >> $GITHUB_ENV
        
  # =========================================================================
  # Terraform Validation
  # =========================================================================
  terraform:
    name: Validate Infrastructure
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Terraform Format
        id: fmt
        run: terraform -chdir=infrastructure fmt -check
        continue-on-error: true
        
      - name: Terraform Init
        id: init
        run: |
          terraform -chdir=infrastructure init \
            -backend-config="bucket=${{ env.TF_STATE_BUCKET }}" \
            -backend-config="key=cleanpro/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="dynamodb_table=${{ env.TF_LOCK_TABLE }}"
            
      - name: Terraform Validate
        id: validate
        run: terraform -chdir=infrastructure validate -no-color
        
      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform -chdir=infrastructure plan -no-color -input=false
        continue-on-error: true
        
      - name: Comment PR with Terraform Plan
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome == 'success' ? '‚úÖ' : '‚ùå' }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome == 'success' ? '‚úÖ' : '‚ùå' }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome == 'success' ? '‚úÖ' : '‚ùå' }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome == 'success' ? '‚úÖ' : '‚ùå' }}\`

            <details><summary>Show Plan</summary>

            \`\`\`terraform
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
            
  # =========================================================================
  # Deployment - Development Environment
  # =========================================================================
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [build, terraform]
    if: (github.ref == 'refs/heads/main' && github.event_name == 'push') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'dev')
    environment:
      name: development
      url: https://dev.cleanpro.example.com
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          
      - name: Terraform Init
        run: |
          terraform -chdir=infrastructure init \
            -backend-config="bucket=${{ env.TF_STATE_BUCKET }}" \
            -backend-config="key=cleanpro/dev/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="dynamodb_table=${{ env.TF_LOCK_TABLE }}"
            
      - name: Deploy with Terraform
        run: |
          terraform -chdir=infrastructure apply -auto-approve \
            -var="environment=dev" \
            -var="aws_region=${{ env.AWS_REGION }}" \
            -var="db_password=${{ secrets.DEV_DB_PASSWORD }}"
            
      - name: Notify on Success
        run: |
          echo "Deployment to development environment successful!"
          # Add notification to Slack or Discord here if needed
            
  # =========================================================================
  # Deployment - Staging Environment
  # =========================================================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [deploy-dev]
    if: (github.ref == 'refs/heads/main' && github.event_name == 'push') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment:
      name: staging
      url: https://staging.cleanpro.example.com
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          
      - name: Terraform Init
        run: |
          terraform -chdir=infrastructure init \
            -backend-config="bucket=${{ env.TF_STATE_BUCKET }}" \
            -backend-config="key=cleanpro/staging/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="dynamodb_table=${{ env.TF_LOCK_TABLE }}"
            
      - name: Deploy with Terraform
        run: |
          terraform -chdir=infrastructure apply -auto-approve \
            -var="environment=staging" \
            -var="aws_region=${{ env.AWS_REGION }}" \
            -var="db_password=${{ secrets.STAGING_DB_PASSWORD }}"
            
      - name: Notify on Success
        run: |
          echo "Deployment to staging environment successful!"
          # Add notification to Slack or Discord here if needed
            
  # =========================================================================
  # Deployment - Production Environment
  # =========================================================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production'
    environment:
      name: production
      url: https://cleanpro.example.com
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          
      - name: Terraform Init
        run: |
          terraform -chdir=infrastructure init \
            -backend-config="bucket=${{ env.TF_STATE_BUCKET }}" \
            -backend-config="key=cleanpro/production/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="dynamodb_table=${{ env.TF_LOCK_TABLE }}"
            
      - name: Deploy with Terraform
        run: |
          terraform -chdir=infrastructure apply -auto-approve \
            -var="environment=production" \
            -var="aws_region=${{ env.AWS_REGION }}" \
            -var="db_password=${{ secrets.PROD_DB_PASSWORD }}"
            
      - name: Notify on Success
        run: |
          echo "Deployment to production environment successful!"
          # Add notification to Slack or Discord here if needed

